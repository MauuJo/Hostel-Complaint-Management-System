Creating database: CREATE DATABASE hcms;

Creating Tables:

CREATE TABLE category (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);

CREATE TABLE staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,
    category_id INT,
    count INT DEFAULT 0,
    FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE
);

CREATE TABLE hostel (
    hostel_id INT AUTO_INCREMENT PRIMARY KEY,
    hostel_name VARCHAR(255) NOT NULL
);

CREATE TABLE student (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,
    hostel_id INT,
    room_no INT,
    FOREIGN KEY (hostel_id) REFERENCES hostel(hostel_id) ON DELETE CASCADE
);

CREATE TABLE complaint (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_id INT,
    student_id INT,
    staff_id INT,
    description TEXT,
    status BOOLEAN,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    resolved_at DATETIME,
    delete_by_student INT DEFAULT 0,
    delete_by_staff INT DEFAULT 0,
    FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE,
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id) ON DELETE CASCADE
);

Creating Triggers:

Trigger to auto-assign staff according to category. At max, a staff can have only 5 active(pending) complaints:

DELIMITER //
CREATE TRIGGER assign_staff
BEFORE INSERT ON complaint
FOR EACH ROW
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cat INT;
    DECLARE c INT;
    DECLARE s INT;

    -- Declare a cursor to handle multiple rows in the SELECT statement
    DECLARE staff_cursor CURSOR FOR
        SELECT category_id, count, staff_id
        FROM staff
        WHERE NEW.category_id = staff.category_id;

    -- Declare a handler for the case when multiple rows are returned
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN staff_cursor;

    fetch_staff: LOOP
        FETCH staff_cursor INTO cat, c, s;

        IF done = 1 THEN
            -- No more rows found, exit the loop
            LEAVE fetch_staff;
        END IF;

        IF c <= 4 THEN
            SET NEW.staff_id = s;
            UPDATE staff
            SET count = count + 1
            WHERE staff_id = s;
            LEAVE fetch_staff; -- Exit loop after assigning staff
        END IF;
    END LOOP;

    CLOSE staff_cursor;

END //

DELIMITER ;

Trigger on deletion of student account, updating the count of respective staffs:

DELIMITER //

CREATE TRIGGER decrease_staff_count
AFTER DELETE ON complaint
FOR EACH ROW
BEGIN
    DECLARE cat_id INT;

    IF OLD.status = 0 THEN
        
        -- Get the category ID of the deleted complaint
        SELECT category_id INTO cat_id
        FROM staff
        WHERE staff_id = OLD.staff_id;

        -- Decrease the count of staff for the corresponding category
        UPDATE staff
        SET count = count - 1
        WHERE category_id = cat_id;
    END IF;
END //

DELIMITER ;

Stored procedures:

Procedure to filter complaints according to status, category and date: (for student)

DELIMITER //

CREATE PROCEDURE filter_complaints(
    IN filter_date DATE,
    IN filter_category INT,
    IN filter_status INT,
    IN studentID INT
)
BEGIN
    -- Select data based on all provided filters
    SELECT * FROM complaint
    WHERE (filter_date IS NULL OR DATE(created_at) = filter_date)
      AND (filter_category IS NULL OR category_id = filter_category)
      AND (filter_status IS NULL OR status = filter_status)
      AND studentID = student_id;
END //

DELIMITER ;

Filter complaints for staff stored procedure:

DELIMITER //

CREATE PROCEDURE filter_complaints_staff(
    IN filter_date DATE,
    IN filter_status INT,
    IN staffID INT
)
BEGIN
    -- Select data based on all provided filters
    SELECT * FROM complaint
    WHERE (filter_date IS NULL OR DATE(created_at) = filter_date)
      AND (filter_status IS NULL OR status = filter_status)
      AND staffID = staff_id;
END //

DELIMITER ;

